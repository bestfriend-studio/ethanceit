{"version":3,"sources":["components/Ethanceit.js","App.js","serviceWorker.js","index.js"],"names":["provider","WalletConnectProvider","infuraId","web3","Web3","BlurImage","styled","Image","props","blur","Ethanceit","address","tipAmount","src","useState","setBlur","ethanced","setEthanced","submitTip","a","enable","eth","getAccounts","accounts","console","log","tx","from","to","value","sendTransaction","txHash","position","alt","height","bottom","right","onClick","borderRadius","App","p","textAlign","ml","mr","as","fontSize","fontWeight","color","my","flexDirection","alignItems","flexWrap","width","mb","border","borderColor","borderWidth","mt","order","boxShadow","m","bg","py","pl","mx","lineHeight","fontFamily","overflow","maxWidth","padding","tip","Boolean","window","location","hostname","match","pinkTheme","theme","colors","primary","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8ff322d7.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { Button, Image, Box } from \"rimble-ui\";\nimport styled from \"styled-components\";\nimport Web3 from \"web3\";\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\n\nconst provider = new WalletConnectProvider({\n  infuraId: \"26c828d9b75641dbabb8177a744280c4\" // Required\n});\n\nconst web3 = new Web3(provider);\n\nconst BlurImage = styled(Image)`\n  filter: blur(${props => props.blur}px);\n`;\n\nfunction Ethanceit({ address, tipAmount, src }) {\n  const [blur, setBlur] = useState(7);\n  const [ethanced, setEthanced] = useState(0);\n\n  const submitTip = async () => {\n    await provider.enable();\n\n    const accounts = await web3.eth.getAccounts();\n    console.log(\"accounts\", accounts);\n\n    const tx = {\n      from: accounts[0],\n      to: address,\n      value: tipAmount\n    };\n\n    console.log(\"tx\", tx);\n\n    const txHash = await web3.eth.sendTransaction(tx);\n    console.log(\"txHash\", txHash);\n\n    ethanced === 0 ? setBlur(3) : setBlur(0);\n    setEthanced(ethanced + 1);\n  };\n\n  return (\n    <Box position={\"relative\"}>\n      <BlurImage\n        alt=\"random unsplash image\"\n        height=\"auto\"\n        blur={blur}\n        src={src}\n      />\n      <Box position=\"absolute\" bottom=\"0\" right=\"0\">\n        {ethanced === 0 && (\n          <Button onClick={submitTip} borderRadius={0}>\n            Enhance it for $.01\n          </Button>\n        )}\n        {ethanced === 1 && (\n          <Button onClick={submitTip} borderRadius={0}>\n            Fully enhance it for another $.01\n          </Button>\n        )}\n      </Box>\n    </Box>\n  );\n}\n\nexport default Ethanceit;\n","import React from \"react\";\nimport { Text, Box, Heading, Flex, Card } from \"rimble-ui\";\nimport \"./App.css\";\nimport Ethanceit from \"./components/Ethanceit\";\n\nfunction App() {\n  return (\n    <Box p=\"2\">\n      <Heading\n        textAlign=\"left\"\n        ml={4}\n        mr={3}\n        as={\"h1\"}\n        fontSize={7}\n        fontWeight={4}\n        color={\"black\"}\n        my={4}\n      >\n        ethance.it\n      </Heading>\n      <Flex\n        flexDirection={[\"column\", \"row\"]}\n        alignItems=\"center\"\n        flexWrap=\"wrap\"\n        width={1}\n        mb={[4, 2]}\n      >\n        <Box\n          border={1}\n          borderColor=\"black\"\n          width={[1, \"auto\"]}\n          borderWidth={3}\n          mr={[0, 4]}\n          ml={[0, 4]}\n          mt={[6, 0]}\n          order={[1, 0]}\n          boxShadow=\"inset 0px -8px 0px rgba(236, 246, 161, 1)\"\n        >\n          <Heading textAlign=\"left\" m={4} as={\"h2\"}>\n            Charge to reveal your content\n          </Heading>\n          <Text m={4} textAlign=\"left\">\n            Install the package to add this component to your site. Then you can\n            charge users to reveal your content.\n          </Text>\n          <Card borderRadius={2} bg=\"#041414\" py={3} pl={3} mx={4} mt={4}>\n            <Text\n              lineHeight={1}\n              textAlign=\"left\"\n              fontFamily=\"monospace\"\n              color=\"#FAE2EA\"\n            >\n              npm install ethanceit\n            </Text>\n          </Card>\n          <Card\n            borderRadius={2}\n            bg=\"#041414\"\n            py={3}\n            pl={3}\n            mx={4}\n            mt={2}\n            mb={4}\n            overflow={[\"hidden\", \"visible\"]}\n          >\n            <Text\n              lineHeight={1}\n              textAlign=\"left\"\n              fontFamily=\"monospace\"\n              color=\"#ECF6A1\"\n            >\n              {`  <Ethanceit`}\n            </Text>\n            <Text\n              lineHeight={1}\n              textAlign=\"left\"\n              fontFamily=\"monospace\"\n              color=\"#ECF6A1\"\n              pl={3}\n            >\n              {`  address=\"0x0000...\" // address to receive the tip`}\n            </Text>\n            <Text\n              lineHeight={1}\n              textAlign=\"left\"\n              fontFamily=\"monospace\"\n              color=\"#ECF6A1\"\n              pl={3}\n              maxWidth={\"100%\"}\n            >\n              {`  src=\"https://source.unsplash.com/random/1280x720\" // image source`}\n            </Text>\n            <Text\n              lineHeight={1}\n              textAlign=\"left\"\n              fontFamily=\"monospace\"\n              color=\"#ECF6A1\"\n              pl={3}\n            >\n              {`  tipAmount=\"100000000000000\" // Gwei \\n /> `}\n            </Text>\n\n            <Text\n              lineHeight={1}\n              textAlign=\"left\"\n              fontFamily=\"monospace\"\n              color=\"#ECF6A1\"\n            >\n              {`/> `}\n            </Text>\n          </Card>\n        </Box>\n        <Box\n          padding={[0, \"100px\"]}\n          mt={[4, 0]}\n          width={[1, 1, 1 / 3]}\n          mb={[4, 0]}\n        >\n          <Ethanceit\n            address=\"0x9Faf8f3EE20B71c5b4Da30F69D1aFbfaF4196382\"\n            src=\"https://source.unsplash.com/random/1280x720\"\n            tip=\"100000000000000\"\n          />\n        </Box>\n      </Flex>\n    </Box>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { ThemeProvider, theme } from \"rimble-ui\";\n\nconst pinkTheme = {\n  ...theme,\n  colors: {\n    ...theme.colors,\n    primary: \"#F82495\"\n  }\n};\n\nReactDOM.render(\n  <ThemeProvider theme={pinkTheme}>\n    <App />\n  </ThemeProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}