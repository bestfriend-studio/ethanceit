{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["provider","WalletConnectProvider","infuraId","web3","Web3","BlurImage","styled","Image","props","blur","App","useState","setBlur","ethanced","setEthanced","submitTip","a","enable","eth","getAccounts","accounts","console","log","tx","from","to","value","sendTransaction","txHash","className","color","alt","borderRadius","height","src","Outline","onClick","bg","maxWidth","textAlign","Boolean","window","location","hostname","match","pinkTheme","theme","colors","primary","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"mgBAOA,IAAMA,EAAW,I,OAAIC,GAAsB,CACzCC,SAAU,qCAGNC,EAAO,IAAIC,IAAKJ,GAEhBK,EAAYC,YAAOC,IAAPD,CAAH,KACE,SAAAE,GAAK,OAAIA,EAAMC,QAwEjBC,MArEf,WAAgB,IAAD,EACWC,mBAAS,GADpB,mBACNF,EADM,KACAG,EADA,OAEmBD,mBAAS,GAF5B,mBAENE,EAFM,KAEIC,EAFJ,KAIPC,EAAS,uCAAG,gCAAAC,EAAA,sEACVhB,EAASiB,SADC,uBAGOd,EAAKe,IAAIC,cAHhB,cAGVC,EAHU,OAIhBC,QAAQC,IAAI,WAAYF,GAElBG,EAAK,CACTC,KAAMJ,EAAS,GACfK,GAAI,6CACJC,MAAO,mBAGTL,QAAQC,IAAI,KAAMC,GAZF,UAcKpB,EAAKe,IAAIS,gBAAgBJ,GAd9B,QAcVK,EAdU,OAehBP,QAAQC,IAAI,SAAUM,GAELhB,EAAJ,IAAbC,EAAyB,EAAa,GACtCC,EAAYD,EAAW,GAlBP,4CAAH,qDAqBf,OACE,kBAAC,IAAD,CAAKgB,UAAU,OACb,kBAAC,IAAD,CAASC,MAAO,WAAhB,cACA,kBAACzB,EAAD,CACE0B,IAAI,wBACJC,aAAc,EACdC,OAAO,OACPxB,KAAMA,EACNyB,IAAI,gDAEN,kBAAC,IAAD,KACgB,IAAbrB,GACC,kBAAC,IAAOsB,QAAR,CAAgBC,QAASrB,GAAzB,uBAIY,IAAbF,GACC,kBAAC,IAAOsB,QAAR,CAAgBC,QAASrB,GAAzB,sCAKJ,kBAAC,IAAD,CAAKsB,GAAG,OAAOC,SAAS,SACtB,kBAAC,IAAD,CAAMR,MAAM,QAAQS,UAAU,QAA9B,yBAGA,kBAAC,IAAD,CAAMT,MAAM,QAAQS,UAAU,QAA9B,cACA,kBAAC,IAAD,CACET,MAAM,QACNS,UAAU,QAFZ,uDAIA,kBAAC,IAAD,CACET,MAAM,QACNS,UAAU,QAFZ,uEAIA,kBAAC,IAAD,CACET,MAAM,QACNS,UAAU,QAFZ,mDCjEYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXN,IAAMC,EAAS,eACVC,IADU,CAEbC,OAAO,eACFD,IAAMC,OADL,CAEJC,QAAS,cAIbC,IAASC,OACP,kBAAC,IAAD,CAAeJ,MAAOD,GACpB,kBAAC,EAAD,OAEFM,SAASC,eAAe,SDgHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvC,QAAQuC,MAAMA,EAAMC,c","file":"static/js/main.3b762bfc.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { Flex, Button, Slider, Image, Box, Text, Heading } from \"rimble-ui\";\nimport styled from \"styled-components\";\nimport \"./App.css\";\nimport Web3 from \"web3\";\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\n\nconst provider = new WalletConnectProvider({\n  infuraId: \"26c828d9b75641dbabb8177a744280c4\" // Required\n});\n\nconst web3 = new Web3(provider);\n\nconst BlurImage = styled(Image)`\n  filter: blur(${props => props.blur}px);\n`;\n\nfunction App() {\n  const [blur, setBlur] = useState(7);\n  const [ethanced, setEthanced] = useState(0);\n\n  const submitTip = async () => {\n    await provider.enable();\n\n    const accounts = await web3.eth.getAccounts();\n    console.log(\"accounts\", accounts);\n\n    const tx = {\n      from: accounts[0],\n      to: \"0x9Faf8f3EE20B71c5b4Da30F69D1aFbfaF4196382\",\n      value: \"100000000000000\"\n    };\n\n    console.log(\"tx\", tx);\n\n    const txHash = await web3.eth.sendTransaction(tx);\n    console.log(\"txHash\", txHash);\n\n    ethanced === 0 ? setBlur(3) : setBlur(0);\n    setEthanced(ethanced + 1);\n  };\n\n  return (\n    <Box className=\"App\">\n      <Heading color={\"primary\"}>ethance.it</Heading>\n      <BlurImage\n        alt=\"random unsplash image\"\n        borderRadius={8}\n        height=\"auto\"\n        blur={blur}\n        src=\"https://source.unsplash.com/random/1280x720\"\n      />\n      <Box>\n        {ethanced === 0 && (\n          <Button.Outline onClick={submitTip}>\n            Enhance it for $.01\n          </Button.Outline>\n        )}\n        {ethanced === 1 && (\n          <Button.Outline onClick={submitTip}>\n            Fully enhance it for another $.01\n          </Button.Outline>\n        )}\n      </Box>\n      <Box bg=\"#333\" maxWidth=\"500px\">\n        <Text color=\"white\" textAlign=\"left\">\n          npm install ethanceit\n        </Text>\n        <Text color=\"white\" textAlign=\"left\">{`<Ethanceit`}</Text>\n        <Text\n          color=\"white\"\n          textAlign=\"left\"\n        >{`  address=\"0x0000...\" // address to receive the tip`}</Text>\n        <Text\n          color=\"white\"\n          textAlign=\"left\"\n        >{`  src=\"https://source.unsplash.com/random/1280x720\" // image source`}</Text>\n        <Text\n          color=\"white\"\n          textAlign=\"left\"\n        >{`  tipAmount=\"100000000000000\" // Gwei \\n /> `}</Text>\n      </Box>\n    </Box>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { ThemeProvider, theme } from \"rimble-ui\";\n\nconst pinkTheme = {\n  ...theme,\n  colors: {\n    ...theme.colors,\n    primary: \"#F82495\"\n  }\n};\n\nReactDOM.render(\n  <ThemeProvider theme={pinkTheme}>\n    <App />\n  </ThemeProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}